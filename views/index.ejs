<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CKC Astrology Portal - Professional</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Playfair+Display:wght@400;500;600;700&display=swap"
        rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --dark-gradient: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            --gold-gradient: linear-gradient(135deg, #f7971e 0%, #ffd200 100%);
            --purple-gradient: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            --glass-bg: rgba(255, 255, 255, 0.25);
            --glass-border: rgba(255, 255, 255, 0.18);
            --text-primary: #1a202c;
            --text-secondary: #4a5568;
            --text-light: #718096;
            --shadow-soft: 0 10px 40px rgba(0, 0, 0, 0.1);
            --shadow-medium: 0 20px 60px rgba(0, 0, 0, 0.15);
            --shadow-strong: 0 30px 80px rgba(0, 0, 0, 0.2);
            --border-radius: 20px;
            --border-radius-lg: 30px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            background-attachment: fixed;
            min-height: 100vh;
            color: var(--text-primary);
            overflow-x: hidden;
            zoom: 0.80;
        }

        /* Animated background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><defs><radialGradient id="a" cx="50%" cy="50%"><stop offset="0%" style="stop-color:rgba(255,255,255,0.1)"/><stop offset="100%" style="stop-color:rgba(255,255,255,0)"/></radialGradient></defs><circle cx="200" cy="200" r="100" fill="url(%23a)"/><circle cx="800" cy="300" r="150" fill="url(%23a)"/><circle cx="300" cy="700" r="120" fill="url(%23a)"/><circle cx="700" cy="800" r="80" fill="url(%23a)"/></svg>') no-repeat center center;
            background-size: cover;
            pointer-events: none;
            z-index: -1;
            animation: float 20s ease-in-out infinite;
        }

        @keyframes float {

            0%,
            100% {
                transform: translateY(0px) scale(1);
            }

            50% {
                transform: translateY(-20px) scale(1.02);
            }
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
        }

        /* Header Section */
        .header {
            text-align: center;
            padding: 60px 0 80px;
            position: relative;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            height: 300px;
            background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
            border-radius: 50%;
            animation: pulse 4s ease-in-out infinite;
        }

        @keyframes pulse {

            0%,
            100% {
                transform: translate(-50%, -50%) scale(1);
                opacity: 0.7;
            }

            50% {
                transform: translate(-50%, -50%) scale(1.1);
                opacity: 1;
            }
        }

        .header h1 {
            font-family: 'Playfair Display', serif;
            font-size: clamp(2.5rem, 5vw, 4rem);
            font-weight: 700;
            margin-bottom: 15px;
            background: linear-gradient(135deg, #fff 0%, #f0f8ff 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            position: relative;
            z-index: 1;
        }

        /* Remove old house positioning CSS and replace with: */
        .chart-house {
            position: relative;
            border: 1px solid #ccc;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            font-size: 10px;
            font-weight: 500;
            line-height: 2.2;
            text-align: center;
            padding: 6px 4px;
            background: rgba(255, 255, 255, 0.95);
            word-wrap: break-word;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .chart-house:hover {
            background: rgba(102, 126, 234, 0.1);
            border-color: #667eea;
            z-index: 10;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
        }

        /* Special styling for Lagna position */
        .lagna-position {
            background: rgba(255, 215, 0, 0.1) !important;
            border-color: #ffd700 !important;
        }

        .lagna-position:hover {
            background: rgba(255, 215, 0, 0.2) !important;
        }

        .header .subtitle {
            font-size: 1.4rem;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 30px;
            font-weight: 300;
            letter-spacing: 0.5px;
        }

        .header .cosmic-icon {
            font-size: 3rem;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 20px;
            animation: rotate 20s linear infinite;
        }

        @keyframes rotate {
            from {
                transform: rotate(0deg);
            }

            to {
                transform: rotate(360deg);
            }
        }

        /* Navigation Pills */
        .nav-pills {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 50px;
            flex-wrap: wrap;
        }

        .nav-pill {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            color: white;
            padding: 12px 25px;
            border-radius: 50px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.95rem;
            letter-spacing: 0.3px;
        }

        .nav-pill:hover,
        .nav-pill.active {
            background: rgba(255, 255, 255, 0.9);
            color: var(--text-primary);
            transform: translateY(-3px);
            box-shadow: var(--shadow-medium);
        }

        /* Service Cards */
        .services-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
            gap: 30px;
            margin-bottom: 50px;
        }

        .service-card {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            border-radius: var(--border-radius-lg);
            padding: 40px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .service-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 50%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .service-card:hover::before {
            opacity: 1;
        }

        .service-card:hover {
            transform: translateY(-10px) scale(1.02);
            box-shadow: var(--shadow-strong);
            background: rgba(255, 255, 255, 0.9);
        }

        .service-card:hover .service-icon {
            transform: scale(1.1) rotate(5deg);
        }

        .service-card:hover .service-title,
        .service-card:hover .service-description,
        .service-card:hover .feature-tag {
            color: var(--text-primary);
        }

        .service-icon {
            width: 80px;
            height: 80px;
            background: var(--gold-gradient);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 25px;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-soft);
        }

        .service-icon i {
            font-size: 32px;
            color: white;
        }

        .service-title {
            font-family: 'Playfair Display', serif;
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: white;
            transition: color 0.3s ease;
        }

        .service-description {
            color: rgba(255, 255, 255, 0.85);
            line-height: 1.7;
            margin-bottom: 25px;
            font-size: 1rem;
            transition: color 0.3s ease;
        }

        .features {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .feature-tag {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 8px 16px;
            border-radius: 25px;
            font-size: 0.85rem;
            font-weight: 500;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        /* Form Sections */
        .form-section {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--border-radius-lg);
            padding: 50px;
            margin-bottom: 40px;
            box-shadow: var(--shadow-medium);
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideInUp 0.6s ease;
        }

        .form-section.active {
            display: block;
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .form-title {
            font-family: 'Playfair Display', serif;
            font-size: 2.5rem;
            font-weight: 600;
            margin-bottom: 40px;
            text-align: center;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .form-group {
            position: relative;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.95rem;
            letter-spacing: 0.3px;
        }

        .form-group input[type="text"],
        .form-group input[type="datetime-local"] {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid rgba(102, 126, 234, 0.2);
            border-radius: 15px;
            font-size: 1rem;
            font-family: 'Inter', sans-serif;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
            background: white;
            transform: translateY(-2px);
        }

        /* Location Autocomplete Styling */
        .location-autocomplete {
            position: relative;
            width: 100%;
        }

        .location-input {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid rgba(102, 126, 234, 0.2);
            border-radius: 15px;
            font-size: 1rem;
            font-family: 'Inter', sans-serif;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
        }

        .location-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
            background: white;
            transform: translateY(-2px);
        }

        .location-input::placeholder {
            color: #999;
            font-style: italic;
        }

        /* Location Suggestions Dropdown */
        .location-suggestions {
            position: absolute;
            top: calc(100% + 2px);
            left: 0;
            right: 0;
            background: white;
            border: 2px solid rgba(102, 126, 234, 0.2);
            border-radius: 15px;
            max-height: 250px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(20px);
        }

        .location-suggestions.show {
            display: block;
            animation: dropdownSlide 0.3s ease;
        }

        @keyframes dropdownSlide {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .location-suggestion {
            padding: 12px 20px;
            cursor: pointer;
            transition: all 0.2s ease;
            border-bottom: 1px solid rgba(102, 126, 234, 0.1);
            font-size: 0.95rem;
            display: flex;
            flex-direction: column;
        }

        .location-suggestion:hover,
        .location-suggestion.highlighted {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(102, 126, 234, 0.05) 100%);
            color: #667eea;
        }

        .location-suggestion:last-child {
            border-bottom: none;
            border-radius: 0 0 13px 13px;
        }

        .location-suggestion:first-child {
            border-radius: 13px 13px 0 0;
        }

        .suggestion-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
        }

        .suggestion-details {
            font-size: 0.85rem;
            color: #666;
        }

        .location-loading {
            padding: 20px;
            text-align: center;
            color: #667eea;
            font-style: italic;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .location-loading::before {
            content: '';
            width: 16px;
            height: 16px;
            border: 2px solid rgba(102, 126, 234, 0.3);
            border-top: 2px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .location-no-results {
            padding: 20px;
            text-align: center;
            color: #999;
            font-style: italic;
        }

        /* Location Info Display */
        .location-info {
            margin-top: 10px;
            padding: 12px 15px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(248, 249, 255, 0.8) 100%);
            border-radius: 10px;
            border: 1px solid rgba(102, 126, 234, 0.1);
            font-size: 0.9rem;
            color: #667eea;
            display: none;
        }

        .location-info.show {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        .location-info .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .location-info .info-row:last-child {
            margin-bottom: 0;
        }

        .location-info .info-label {
            font-weight: 600;
        }

        .location-info .info-value {
            color: #333;
        }

        /* Gender Dropdown Styling */
        .gender-dropdown {
            position: relative;
            width: 100%;
        }

        .gender-select {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid rgba(102, 126, 234, 0.2);
            border-radius: 15px;
            font-size: 1rem;
            font-family: 'Inter', sans-serif;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            cursor: pointer;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23667eea' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 16px;
        }

        .gender-select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
            background: white;
            transform: translateY(-2px);
        }

        .person-section {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(248, 249, 255, 0.8) 100%);
            border-radius: var(--border-radius);
            padding: 35px;
            margin-bottom: 30px;
            border: 1px solid rgba(102, 126, 234, 0.1);
        }

        .person-title {
            font-family: 'Playfair Display', serif;
            font-size: 1.5rem;
            font-weight: 600;
            color: #667eea;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        /* Form Action Buttons */
        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            align-items: center;
            margin: 30px 0;
            flex-wrap: wrap;
        }

        /* Enhanced Button */
        .btn-primary {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 18px 40px;
            border-radius: 15px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            min-width: 220px;
            font-family: 'Inter', sans-serif;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s ease;
        }

        .btn-primary:hover::before {
            left: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
            background: linear-gradient(135deg, #7c8ef5 0%, #8a63c7 100%);
        }

        .btn-primary:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        /* Clear Button */
        .btn-clear {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            color: #495057;
            border: 2px solid #dee2e6;
            padding: 18px 30px;
            border-radius: 15px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            min-width: 160px;
            font-family: 'Inter', sans-serif;
            letter-spacing: 0.3px;
            position: relative;
            overflow: hidden;
        }

        .btn-clear::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.5), transparent);
            transition: left 0.5s ease;
        }

        .btn-clear:hover::before {
            left: 100%;
        }

        .btn-clear:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
            border-color: #667eea;
            color: #667eea;
        }

        .back-btn {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            color: var(--text-primary);
            padding: 12px 25px;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-bottom: 30px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            border: none;
        }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.9);
            transform: translateY(-2px);
            box-shadow: var(--shadow-soft);
        }

        /* Loading Animation */
        .loading-spinner {
            display: none;
            width: 24px;
            height: 24px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Results Section */
        .results-section {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: var(--border-radius-lg);
            padding: 50px;
            box-shadow: var(--shadow-medium);
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideInUp 0.6s ease;
        }

        .results-section.active {
            display: block;
        }

        .result-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .result-title {
            font-family: 'Playfair Display', serif;
            font-size: 2.5rem;
            font-weight: 600;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .result-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 40px;
            justify-content: center;
        }

        .tab-btn {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            border: 2px solid rgba(102, 126, 234, 0.2);
            padding: 12px 25px;
            border-radius: 25px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .tab-btn.active,
        .tab-btn:hover {
            background: var(--primary-gradient);
            color: white;
            border-color: transparent;
            transform: translateY(-2px);
            box-shadow: var(--shadow-soft);
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.4s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Info Cards */
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .info-card {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(248, 249, 255, 0.8) 100%);
            border-radius: var(--border-radius);
            padding: 25px;
            border: 1px solid rgba(102, 126, 234, 0.1);
            transition: all 0.3s ease;
        }

        .info-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-soft);
            border-color: rgba(102, 126, 234, 0.2);
        }

        .info-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #667eea;
            margin-bottom: 10px;
            font-family: 'Playfair Display', serif;
        }

        .info-value {
            font-size: 1.1rem;
            color: var(--text-primary);
            font-weight: 500;
            line-height: 1.6;
        }

        /* South Indian Chart Design */
        .chart-card {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(248, 249, 255, 0.8) 100%);
            border-radius: var(--border-radius);
            padding: 30px;
            text-align: center;
            border: 1px solid rgba(102, 126, 234, 0.1);
            margin-bottom: 30px;
        }

        .chart-title {
            font-family: 'Playfair Display', serif;
            font-size: 1.5rem;
            font-weight: 600;
            color: #667eea;
            margin-bottom: 25px;
        }

        .south-indian-chart {
            width: min(90vw, 600px);
            /* Responsive width, max 600px */
            height: min(90vw, 600px);
            /* Maintain square aspect ratio */
            margin: 30px auto;
            position: relative;
            background: linear-gradient(145deg, #ffffff 0%, #f8f9ff 100%);
            border: 4px solid transparent;
            background-clip: padding-box;
            border-radius: 20px;
            box-shadow:
                0 20px 60px rgba(102, 126, 234, 0.15),
                0 8px 30px rgba(102, 126, 234, 0.1),
                inset 0 1px 0 rgba(255, 255, 255, 0.8);
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(4, 1fr);
            overflow: hidden;
            transform: perspective(1000px) rotateX(2deg);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* Add gradient border effect */
        .south-indian-chart::before {
            content: '';
            position: absolute;
            top: -4px;
            left: -4px;
            right: -4px;
            bottom: -4px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            border-radius: 24px;
            z-index: -1;
        }

        .south-indian-chart:hover {
            transform: perspective(1000px) rotateX(0deg) scale(1.02);
            box-shadow:
                0 30px 80px rgba(102, 126, 234, 0.2),
                0 15px 40px rgba(102, 126, 234, 0.15);
        }

        .chart-house {
            position: relative;
            border: 1px solid rgba(102, 126, 234, 0.2);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            font-size: clamp(11px, 2vw, 14px);
            font-weight: 600;
            line-height: 1.3;
            text-align: center;
            padding: clamp(8px, 2vw, 12px);
            background: linear-gradient(145deg, rgba(255, 255, 255, 0.9) 0%, rgba(248, 249, 255, 0.8) 100%);
            backdrop-filter: blur(10px);
            word-wrap: break-word;
            overflow: hidden;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
        }


        .chart-house:hover {
            background: linear-gradient(145deg, rgba(102, 126, 234, 0.1) 0%, rgba(102, 126, 234, 0.05) 100%);
            border-color: #667eea;
            z-index: 10;
            box-shadow:
                0 8px 25px rgba(102, 126, 234, 0.15),
                inset 0 1px 0 rgba(255, 255, 255, 0.8);
            transform: translateY(-2px) scale(1.02);
        }

        /* Enhanced House Numbers */
        .house-number {
            position: absolute;
            top: 4px;
            left: 4px;
            font-size: clamp(9px, 1.5vw, 11px);
            color: #667eea;
            font-weight: 800;
            background: linear-gradient(135deg, #fff 0%, #f0f8ff 100%);
            border-radius: 50%;
            width: clamp(18px, 3vw, 22px);
            height: clamp(18px, 3vw, 22px);
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid #667eea;
            z-index: 3;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
        }

        .chart-house:hover .house-number {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            transform: scale(1.1);
        }



        /* South Indian Grid Positions */
        .chart-house.house-12 {
            grid-row: 1;
            grid-column: 1;
        }

        .chart-house.house-1 {
            grid-row: 1;
            grid-column: 2;
        }

        .chart-house.house-2 {
            grid-row: 1;
            grid-column: 3;
        }

        .chart-house.house-3 {
            grid-row: 1;
            grid-column: 4;
        }

        .chart-house.house-11 {
            grid-row: 2;
            grid-column: 1;
        }

        .chart-house.house-4 {
            grid-row: 2;
            grid-column: 4;
        }

        .chart-house.house-10 {
            grid-row: 3;
            grid-column: 1;
        }

        .chart-house.house-5 {
            grid-row: 3;
            grid-column: 4;
        }

        .chart-house.house-9 {
            grid-row: 4;
            grid-column: 1;
        }

        .chart-house.house-8 {
            grid-row: 4;
            grid-column: 2;
        }

        .chart-house.house-7 {
            grid-row: 4;
            grid-column: 3;
        }

        .chart-house.house-6 {
            grid-row: 4;
            grid-column: 4;
        }

        .chart-center {
            grid-row: 2 / 4;
            grid-column: 2 / 4;
            border: 2px solid #667eea;
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: #667eea;
            font-size: 14px;
            text-align: center;
            padding: 10px;
            box-shadow: inset 0 0 20px rgba(102, 126, 234, 0.2);
        }

        .center-title {
            font-size: 12px;
            margin-bottom: 8px;
            color: #667eea;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .center-value {
            font-size: 16px;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 4px;
            line-height: 1.2;
        }

        .center-english {
            font-size: 20px;
            color: #000000;
            font-weight: 500;
        }

        .house-number {
            position: absolute;
            top: 2px;
            left: 2px;
            font-size: 8px;
            color: #667eea;
            font-weight: 700;
            background: white;
            border-radius: 50%;
            width: 14px;
            height: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #667eea;
            z-index: 2;
        }

        .planet-list {
            font-size: clamp(10px, 2vw, 20px);
            color: #000;
            font-weight: 600;
            margin-top: clamp(16px, 3vw, 20px);
            line-height: 1.9;
            display: flex;
            flex-direction: row;
        }


        .sign-name {
            font-size: 16px;
            color: #000000;
            margin-top: 3px;
            font-weight: 400;
            font-style: bold;
            max-width: 100%;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }


        .planet-item {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: clamp(3px, 1vw, 5px) clamp(6px, 1.5vw, 8px);
            border-radius: 8px;
            margin: 1px 0;
            font-size: clamp(9px, 1.8vw, 11px);
            border: 1px solid rgba(102, 126, 234, 0.3);
            font-weight: 700;
            text-align: center;
            box-shadow: 0 2px 6px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .planet-item:hover {
            background: linear-gradient(135deg, #7c8ef5 0%, #8a63c7 100%);
            transform: translateY(-1px) scale(1.05);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        /* Special Lagna Planet Styling */
        .planet-item.lagna-planet {
            background: linear-gradient(135deg, #ff6b35 0%, #ff4500 100%) !important;
            color: white !important;
            font-weight: 800 !important;
            border: 2px solid #ff4500 !important;
            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.4) !important;
            animation: lagnaGlow 2s ease-in-out infinite alternate;
        }

        @keyframes lagnaGlow {
            from {
                box-shadow: 0 4px 15px rgba(255, 107, 53, 0.4);
            }

            to {
                box-shadow: 0 6px 20px rgba(255, 107, 53, 0.6), 0 0 15px rgba(255, 107, 53, 0.3);
            }
        }

        /* Enhanced Sign Names */
        /* .sign-name {
            font-size: clamp(8px, 1.5vw, 10px);
            color: #666;
            margin-top: 6px;
            font-weight: 500;
            max-width: 100%;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        } */

        .chart-house:hover .sign-name {
            opacity: 1;
            color: #667eea;
        }

        /* Enhanced Chart Center */
        .chart-center {
            grid-row: 2 / 4;
            grid-column: 2 / 4;
            border: 3px solid #667eea;
            background: linear-gradient(145deg, #fff3cd 0%, #ffeaa7 20%, #fdcb6e 100%);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-weight: 800;
            color: #667eea;
            font-size: clamp(14px, 3vw, 18px);
            text-align: center;
            padding: clamp(12px, 2.5vw, 16px);
            box-shadow:
                inset 0 2px 10px rgba(102, 126, 234, 0.2),
                0 4px 20px rgba(102, 126, 234, 0.15);
            border-radius: 15px;
            position: relative;
            overflow: hidden;
        }

        .chart-center::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%);
            animation: shimmer 3s ease-in-out infinite;
        }

        @keyframes shimmer {

            0%,
            100% {
                transform: translateX(-100%);
            }

            50% {
                transform: translateX(100%);
            }
        }

        .center-title {
            font-size: clamp(12px, 2.5vw, 15px);
            margin-bottom: clamp(6px, 1.5vw, 10px);
            color: #667eea;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            text-shadow: 0 1px 3px rgba(102, 126, 234, 0.3);
        }

        .center-value {
            font-size: clamp(16px, 3.5vw, 22px);
            font-weight: 900;
            color: #667eea;
            margin-bottom: clamp(4px, 1vw, 6px);
            line-height: 1.2;
            text-shadow: 0 2px 4px rgba(102, 126, 234, 0.3);
        }

        .center-english {
            font-size: clamp(10px, 2vw, 22px);
            color: #000000;
            font-weight: 600;
            opacity: 0.8;
        }

        /* Enhanced Chart Card Container */
        .chart-card {
            background: linear-gradient(145deg, rgba(255, 255, 255, 0.9) 0%, rgba(248, 249, 255, 0.8) 100%);
            backdrop-filter: blur(20px);
            border-radius: 25px;
            padding: clamp(25px, 5vw, 40px);
            text-align: center;
            border: 1px solid rgba(102, 126, 234, 0.1);
            margin-bottom: 40px;
            box-shadow:
                0 20px 60px rgba(102, 126, 234, 0.1),
                0 8px 30px rgba(102, 126, 234, 0.05);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .chart-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            border-radius: 25px 25px 0 0;
        }

        .chart-card:hover {
            transform: translateY(-5px);
            box-shadow:
                0 30px 80px rgba(102, 126, 234, 0.15),
                0 15px 40px rgba(102, 126, 234, 0.1);
        }

        /* Enhanced Chart Title */
        .chart-title {
            font-family: 'Playfair Display', serif;
            font-size: clamp(1.3rem, 4vw, 1.8rem);
            font-weight: 700;
            color: #667eea;
            margin-bottom: 30px;
            position: relative;
            display: inline-block;
        }

        .chart-title::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            border-radius: 2px;
        }

        /* Enhanced Chart Legend */
        .chart-legend {
            margin-top: 30px;
            padding: 25px;
            background: linear-gradient(145deg, rgba(102, 126, 234, 0.05) 0%, rgba(248, 249, 255, 0.8) 100%);
            border-radius: 20px;
            border: 1px solid rgba(102, 126, 234, 0.1);
            font-size: clamp(11px, 2.5vw, 14px);
            color: var(--text-secondary);
            text-align: center;
            backdrop-filter: blur(10px);
        }

        .legend-item {
            display: inline-block;
            margin: 6px 8px;
            padding: 8px 16px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(102, 126, 234, 0.05) 100%);
            border-radius: 20px;
            border: 1px solid rgba(102, 126, 234, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
            backdrop-filter: blur(10px);
        }

        .legend-item:hover {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(102, 126, 234, 0.1) 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
        }

        .planet-abbr {
            font-weight: 800;
            color: #667eea;
            margin-right: 4px;
        }

        /* Mobile Responsive Adjustments */
        @media (max-width: 768px) {
            .south-indian-chart {
                width: min(95vw, 500px);
                height: min(95vw, 500px);
                margin: 20px auto;
                transform: none;
            }

            .south-indian-chart:hover {
                transform: scale(1.01);
            }

            .chart-card {
                padding: 20px 15px;
                margin-bottom: 25px;
            }

            .chart-legend {
                padding: 20px 15px;
                margin-top: 20px;
            }

            .legend-item {
                margin: 4px 6px;
                padding: 6px 12px;
                font-size: 12px;
            }

            .form-actions {
                flex-direction: column;
            }

            .btn-primary,
            .btn-clear {
                min-width: 200px;
            }
        }

        @media (max-width: 480px) {
            .south-indian-chart {
                width: min(98vw, 400px);
                height: min(98vw, 400px);
            }

            .planet-list {
                max-height: 50px;
            }

            .chart-house {
                padding: 6px 4px;
            }
        }

        /* Special styling for houses containing Lagna */
        .chart-house.has-lagna {
            border: 2px solid #ff6b35 !important;
            background: linear-gradient(145deg, rgba(255, 107, 53, 0.1) 0%, rgba(255, 107, 53, 0.05) 100%) !important;
            animation: lagnaHousePulse 3s ease-in-out infinite;
        }

        @keyframes lagnaHousePulse {

            0%,
            100% {
                box-shadow: 0 0 10px rgba(255, 107, 53, 0.3);
            }

            50% {
                box-shadow: 0 0 20px rgba(255, 107, 53, 0.5), inset 0 0 10px rgba(255, 107, 53, 0.1);
            }
        }

        /* Custom Scrollbar for Planet Lists */




        /* .planet-list::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 2px;
        } */

        /* .planet-list::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #7c8ef5 0%, #8a63c7 100%);
        } */

        .lagna-marker {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff6b6b;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 8px;
            font-weight: bold;
            border: 2px solid white;
            z-index: 3;
            box-shadow: 0 2px 10px rgba(255, 107, 107, 0.4);
        }

        /* Error Message */
        .error-message {
            background: linear-gradient(135deg, #f8d7da 0%, #f1b0b7 100%);
            color: #721c24;
            padding: 20px;
            border-radius: var(--border-radius);
            margin: 25px 0;
            border: 1px solid #f5c6cb;
            animation: shake 0.5s ease-in-out;
        }

        @keyframes shake {

            0%,
            100% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-5px);
            }

            75% {
                transform: translateX(5px);
            }
        }

        /* Success Message */
        .success-message {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            color: #155724;
            padding: 20px;
            border-radius: var(--border-radius);
            margin: 25px 0;
            border: 1px solid #c3e6cb;
            animation: slideInUp 0.5s ease-in-out;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .success-message i {
            font-size: 1.2rem;
            color: #28a745;
        }

        /* Chart Legend */
        .chart-legend {
            margin-top: 30px;
            font-size: 12px;
            color: var(--text-secondary);
            text-align: center;
        }

        .legend-item {
            display: inline-block;
            margin: 5px 12px;
            padding: 6px 12px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 10px;
            border: 1px solid rgba(102, 126, 234, 0.2);
        }

        .planet-abbr {
            font-weight: 700;
            color: #667eea;
        }

        /* Compatibility specific styles */
        .compatibility-score {
            text-align: center;
            margin-bottom: 30px;
        }

        .score-circle {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            box-shadow: var(--shadow-medium);
        }

        .score-inner {
            color: white;
            font-size: 2rem;
            font-weight: 700;
        }

        .porutham-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .porutham-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(102, 126, 234, 0.1);
            transition: all 0.3s ease;
        }

        .porutham-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-soft);
        }

        .porutham-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .porutham-name {
            font-weight: 600;
            color: #667eea;
            font-size: 1.1rem;
        }

        .porutham-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .porutham-status.compatible {
            background: #d4edda;
            color: #155724;
        }

        .porutham-status.incompatible {
            background: #f8d7da;
            color: #721c24;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .header {
                padding: 40px 0 60px;
            }

            .header h1 {
                font-size: 2.5rem;
            }

            .services-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .form-section,
            .results-section {
                padding: 30px 20px;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .info-grid {
                grid-template-columns: 1fr;
            }

            .south-indian-chart {
                width: 300px;
                height: 300px;
            }

            .nav-pills {
                flex-direction: column;
                align-items: center;
            }

            .location-suggestions {
                max-height: 200px;
            }
        }

        /* Utility Classes */
        .hidden {
            display: none !important;
        }

        .fade-in {
            animation: fadeIn 0.6s ease;
        }

        .slide-up {
            animation: slideInUp 0.6s ease;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--primary-gradient);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--secondary-gradient);
        }
    </style>
</head>

<body>
    <div class="container">
        <!-- Header Section -->
        <div class="header">
            <div class="cosmic-icon">
                <i class="fas fa-star-and-crescent"></i>
            </div>
            <h1>CKC Astrology Portal</h1>
            <p class="subtitle">Discover Your Cosmic Journey Through Professional Astrological Analysis</p>
        </div>

        <!-- Navigation Pills -->
        <div class="nav-pills">
            <div class="nav-pill active" data-section="services">
                <i class="fas fa-home"></i> Services
            </div>
            <div class="nav-pill" data-section="birth-chart">
                <i class="fas fa-chart-pie"></i> Birth Chart
            </div>
            <div class="nav-pill" data-section="compatibility">
                <i class="fas fa-heart"></i> Compatibility
            </div>
            <div class="nav-pill" data-section="behavior">
                <i class="fas fa-brain"></i> Behavior
            </div>
        </div>

        <!-- Services Grid -->
        <div id="services-section" class="services-grid">
            <div class="service-card" data-service="astrology">
                <div class="service-icon">
                    <i class="fas fa-chart-pie"></i>
                </div>
                <h3 class="service-title">Birth Chart Analysis</h3>
                <p class="service-description">Unlock the secrets of your cosmic blueprint with comprehensive birth
                    chart analysis including Rashi, Nakshatra, and planetary positions that shape your destiny.</p>
                <div class="features">
                    <span class="feature-tag">Birth Chart</span>
                    <span class="feature-tag">Navamsa Chart</span>
                    <span class="feature-tag">Planetary Positions</span>
                    <span class="feature-tag">Lagna Analysis</span>
                </div>
            </div>

            <div class="service-card" data-service="compatibility">
                <div class="service-icon">
                    <i class="fas fa-heart"></i>
                </div>
                <h3 class="service-title">Marriage Compatibility</h3>
                <p class="service-description">Discover the harmony between souls through traditional Porutham analysis.
                    Compare birth charts to understand marital compatibility and receive divine guidance.</p>
                <div class="features">
                    <span class="feature-tag">10 Poruthams</span>
                    <span class="feature-tag">Compatibility Score</span>
                    <span class="feature-tag">Detailed Analysis</span>
                    <span class="feature-tag">Remedies</span>
                </div>
            </div>

            <div class="service-card" data-service="behavior">
                <div class="service-icon">
                    <i class="fas fa-brain"></i>
                </div>
                <h3 class="service-title">Behavior Prediction</h3>
                <p class="service-description">Understand your inner nature and behavioral patterns through cosmic
                    influences. Discover personality traits and life tendencies written in the stars.</p>
                <div class="features">
                    <span class="feature-tag">Personality Traits</span>
                    <span class="feature-tag">Career Insights</span>
                    <span class="feature-tag">Relationship Style</span>
                    <span class="feature-tag">Life Patterns</span>
                </div>
            </div>
        </div>

        <!-- Birth Chart Analysis Form -->
        <div id="birth-chart-section" class="form-section">
            <button class="back-btn" onclick="showSection('services')">
                <i class="fas fa-arrow-left"></i> Back to Services
            </button>
            <h2 class="form-title">
                <i class="fas fa-chart-pie"></i> Birth Chart Analysis
            </h2>
            <form id="birth-chart-form">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="birth-datetime"><i class="fas fa-calendar-clock"></i> Birth Date & Time</label>
                        <input type="datetime-local" id="birth-datetime" name="birth-datetime" required>
                    </div>
                    <div class="form-group">
                        <label for="birth-location"><i class="fas fa-map-marker-alt"></i> Birth Location</label>
                        <div class="location-autocomplete">
                            <input type="text" class="location-input" id="birth-location" name="birth-location"
                                placeholder="Start typing your birth city..." autocomplete="off" required>
                            <div class="location-suggestions" id="birth-location-suggestions"></div>
                        </div>
                        <div class="location-info" id="birth-location-info">
                            <div class="info-row">
                                <span class="info-label">Location:</span>
                                <span class="info-value" id="birth-location-display">-</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Timezone:</span>
                                <span class="info-value" id="birth-timezone-display">-</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Coordinates:</span>
                                <span class="info-value" id="birth-coordinates-display">-</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Coordinates in degrees:</span>
                                <span class="info-value" id="birth-coordinates-degrees-display">-</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Hidden fields for API compatibility -->
                <input type="hidden" id="birth-year" name="year">
                <input type="hidden" id="birth-month" name="month">
                <input type="hidden" id="birth-day" name="day">
                <input type="hidden" id="birth-hour" name="hour">
                <input type="hidden" id="birth-minute" name="minute">
                <input type="hidden" id="birth-timezone" name="timezone">
                <input type="hidden" id="birth-latitude" name="latitude">
                <input type="hidden" id="birth-longitude" name="longitude">

                <div class="form-actions">
                    <button type="button" class="btn-clear" onclick="clearForm('birth-chart')">
                        <i class="fas fa-eraser"></i>
                        <span class="btn-text">Clear Form</span>
                    </button>
                    <button type="submit" class="btn-primary">
                        <span class="btn-text">Analyze Birth Chart</span>
                        <div class="loading-spinner"></div>
                        <i class="fas fa-magic"></i>
                    </button>
                </div>
            </form>
        </div>

        <!-- Compatibility Analysis Form -->
        <div id="compatibility-section" class="form-section">
            <button class="back-btn" onclick="showSection('services')">
                <i class="fas fa-arrow-left"></i> Back to Services
            </button>
            <h2 class="form-title">
                <i class="fas fa-heart"></i> Marriage Compatibility Analysis
            </h2>
            <form id="compatibility-form">
                <div class="person-section">
                    <h3 class="person-title">
                        <i class="fas fa-user"></i> Person 1 Details
                    </h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="person1-name"><i class="fas fa-user"></i> Name</label>
                            <input type="text" id="person1-name" name="person1-name" required
                                placeholder="Enter full name">
                        </div>
                        <div class="form-group">
                            <label for="person1-gender"><i class="fas fa-venus-mars"></i> Gender</label>
                            <div class="gender-dropdown">
                                <select class="gender-select" id="person1-gender" name="person1-gender" required>
                                    <option value="">Select gender...</option>
                                    <option value="male">Male</option>
                                    <option value="female">Female</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="person1-datetime"><i class="fas fa-calendar-clock"></i> Birth Date &
                                Time</label>
                            <input type="datetime-local" id="person1-datetime" name="person1-datetime" required>
                        </div>
                        <div class="form-group">
                            <label for="person1-location"><i class="fas fa-map-marker-alt"></i> Birth Location</label>
                            <div class="location-autocomplete">
                                <input type="text" class="location-input" id="person1-location" name="person1-location"
                                    placeholder="Start typing birth city..." autocomplete="off" required>
                                <div class="location-suggestions" id="person1-location-suggestions"></div>
                            </div>
                            <div class="location-info" id="person1-location-info">
                                <div class="info-row">
                                    <span class="info-label">Location:</span>
                                    <span class="info-value" id="person1-location-display">-</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Timezone:</span>
                                    <span class="info-value" id="person1-timezone-display">-</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Coordinates:</span>
                                    <span class="info-value" id="person1-coordinates-display">-</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Coordinates in degrees:</span>
                                    <span class="info-value" id="person1-coordinates-degrees-display">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="person-section">
                    <h3 class="person-title">
                        <i class="fas fa-user"></i> Person 2 Details
                    </h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="person2-name"><i class="fas fa-user"></i> Name</label>
                            <input type="text" id="person2-name" name="person2-name" required
                                placeholder="Enter full name">
                        </div>
                        <div class="form-group">
                            <label for="person2-gender"><i class="fas fa-venus-mars"></i> Gender</label>
                            <div class="gender-dropdown">
                                <select class="gender-select" id="person2-gender" name="person2-gender" required>
                                    <option value="">Select gender...</option>
                                    <option value="male">Male</option>
                                    <option value="female">Female</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="person2-datetime"><i class="fas fa-calendar-clock"></i> Birth Date &
                                Time</label>
                            <input type="datetime-local" id="person2-datetime" name="person2-datetime" required>
                        </div>
                        <div class="form-group">
                            <label for="person2-location"><i class="fas fa-map-marker-alt"></i> Birth Location</label>
                            <div class="location-autocomplete">
                                <input type="text" class="location-input" id="person2-location" name="person2-location"
                                    placeholder="Start typing birth city..." autocomplete="off" required>
                                <div class="location-suggestions" id="person2-location-suggestions"></div>
                            </div>
                            <div class="location-info" id="person2-location-info">
                                <div class="info-row">
                                    <span class="info-label">Location:</span>
                                    <span class="info-value" id="person2-location-display">-</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Timezone:</span>
                                    <span class="info-value" id="person2-timezone-display">-</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Coordinates:</span>
                                    <span class="info-value" id="person2-coordinates-display">-</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Coordinates in degrees:</span>
                                    <span class="info-value" id="person2-coordinates-degrees-display">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Hidden fields for person 1 -->
                <input type="hidden" id="person1-year" name="person1-year">
                <input type="hidden" id="person1-month" name="person1-month">
                <input type="hidden" id="person1-day" name="person1-day">
                <input type="hidden" id="person1-hour" name="person1-hour">
                <input type="hidden" id="person1-minute" name="person1-minute">
                <input type="hidden" id="person1-timezone" name="person1-timezone">
                <input type="hidden" id="person1-latitude" name="person1-latitude">
                <input type="hidden" id="person1-longitude" name="person1-longitude">

                <!-- Hidden fields for person 2 -->
                <input type="hidden" id="person2-year" name="person2-year">
                <input type="hidden" id="person2-month" name="person2-month">
                <input type="hidden" id="person2-day" name="person2-day">
                <input type="hidden" id="person2-hour" name="person2-hour">
                <input type="hidden" id="person2-minute" name="person2-minute">
                <input type="hidden" id="person2-timezone" name="person2-timezone">
                <input type="hidden" id="person2-latitude" name="person2-latitude">
                <input type="hidden" id="person2-longitude" name="person2-longitude">

                <div class="form-actions">
                    <button type="button" class="btn-clear" onclick="clearForm('compatibility')">
                        <i class="fas fa-eraser"></i>
                        <span class="btn-text">Clear Form</span>
                    </button>
                    <button type="submit" class="btn-primary">
                        <span class="btn-text">Analyze Compatibility</span>
                        <div class="loading-spinner"></div>
                        <i class="fas fa-heart"></i>
                    </button>
                </div>
            </form>
        </div>

        <!-- Behavior Prediction Form -->
        <div id="behavior-section" class="form-section">
            <button class="back-btn" onclick="showSection('services')">
                <i class="fas fa-arrow-left"></i> Back to Services
            </button>
            <h2 class="form-title">
                <i class="fas fa-brain"></i> Behavior Prediction Analysis
            </h2>
            <form id="behavior-form">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="behavior-datetime"><i class="fas fa-calendar-clock"></i> Birth Date & Time</label>
                        <input type="datetime-local" id="behavior-datetime" name="behavior-datetime" required>
                    </div>
                    <div class="form-group">
                        <label for="behavior-location"><i class="fas fa-map-marker-alt"></i> Birth Location</label>
                        <div class="location-autocomplete">
                            <input type="text" class="location-input" id="behavior-location" name="behavior-location"
                                placeholder="Start typing your birth city..." autocomplete="off" required>
                            <div class="location-suggestions" id="behavior-location-suggestions"></div>
                        </div>
                        <div class="location-info" id="behavior-location-info">
                            <div class="info-row">
                                <span class="info-label">Location:</span>
                                <span class="info-value" id="behavior-location-display">-</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Timezone:</span>
                                <span class="info-value" id="behavior-timezone-display">-</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Coordinates:</span>
                                <span class="info-value" id="behavior-coordinates-display">-</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Coordinates in degrees:</span>
                                <span class="info-value" id="behavior-coordinates-degrees-display">-</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Hidden fields for API compatibility -->
                <input type="hidden" id="behavior-year" name="year">
                <input type="hidden" id="behavior-month" name="month">
                <input type="hidden" id="behavior-day" name="day">
                <input type="hidden" id="behavior-hour" name="hour">
                <input type="hidden" id="behavior-minute" name="minute">
                <input type="hidden" id="behavior-timezone" name="timezone">
                <input type="hidden" id="behavior-latitude" name="latitude">
                <input type="hidden" id="behavior-longitude" name="longitude">

                <div class="form-actions">
                    <button type="button" class="btn-clear" onclick="clearForm('behavior')">
                        <i class="fas fa-eraser"></i>
                        <span class="btn-text">Clear Form</span>
                    </button>
                    <button type="submit" class="btn-primary">
                        <span class="btn-text">Predict Behavior</span>
                        <div class="loading-spinner"></div>
                        <i class="fas fa-brain"></i>
                    </button>
                </div>
            </form>
        </div>

        <!-- Results Section -->
        <div id="results-section" class="results-section">
            <button class="back-btn" onclick="showSection('services')">
                <i class="fas fa-arrow-left"></i> Back to Services
            </button>
            <div class="result-header">
                <h2 class="result-title" id="result-title">Analysis Results</h2>
            </div>

            <div class="result-tabs" id="result-tabs">
                <!-- Tabs will be dynamically generated -->
            </div>

            <div id="result-content">
                <!-- Content will be dynamically generated -->
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentSection = 'services';
        let locationInstances = new Map();
        let selectedLocations = new Map();
        let searchTimeouts = new Map();

        // Planet abbreviations for charts
        const planetAbbreviations = {
            'Sun': 'Su', 'Moon': 'Mo', 'Mars': 'Ma', 'Mercury': 'Me',
            'Jupiter': 'Ju', 'Venus': 'Ve', 'Saturn': 'Sa', 'Rahu': 'Ra',
            'Ketu': 'Ke', 'Uranus': 'Ur', 'Neptune': 'Ne', 'Pluto': 'Pl', 'Lagna': 'Lg'
        };

        // Signs mapping for Tamil to English
        const signMapping = {
            'மேஷம்': 'Aries',
            'ரிஷபம்': 'Taurus',
            'மிதுனம்': 'Gemini',
            'கடகம்': 'Cancer',
            'சிம்மம்': 'Leo',
            'கன்னி': 'Virgo',
            'துலாம்': 'Libra',
            'விருச்சிகம்': 'Scorpio',
            'தனுசு': 'Sagittarius',
            'மகரம்': 'Capricorn',
            'கும்பம்': 'Aquarius',
            'மீனம்': 'Pisces'
        };

        // Sign numbers to names mapping (1-12 for zodiac signs)
        const signNumbers = {
            1: 'Aries', 2: 'Taurus', 3: 'Gemini', 4: 'Cancer',
            5: 'Leo', 6: 'Virgo', 7: 'Libra', 8: 'Scorpio',
            9: 'Sagittarius', 10: 'Capricorn', 11: 'Aquarius', 12: 'Pisces'
        };

        // Location Autocomplete Class (CSP-compliant)
        class LocationAutocomplete {
            constructor(inputId) {
                this.inputId = inputId;
                this.input = document.getElementById(inputId);
                this.suggestionsContainer = document.getElementById(`${inputId}-suggestions`);
                this.locationData = null;
                this.currentQuery = '';
                this.highlightedIndex = -1;

                if (!this.input || !this.suggestionsContainer) {
                    console.error(`LocationAutocomplete: Elements not found for ${inputId}`);
                    return;
                }

                this.init();
            }

            init() {
                // Input events
                this.input.addEventListener('input', (e) => this.handleInput(e));
                this.input.addEventListener('keydown', (e) => this.handleKeydown(e));
                this.input.addEventListener('focus', () => this.handleFocus());
                this.input.addEventListener('blur', (e) => this.handleBlur(e));

                // Suggestions container events
                this.suggestionsContainer.addEventListener('mousedown', (e) => {
                    e.preventDefault(); // Prevent blur
                });

                this.suggestionsContainer.addEventListener('click', (e) => {
                    if (e.target.closest('.location-suggestion')) {
                        this.selectSuggestion(e.target.closest('.location-suggestion'));
                    }
                });

                // Close suggestions on outside click
                document.addEventListener('click', (e) => {
                    if (!e.target.closest('.location-autocomplete') ||
                        !e.target.closest('.location-autocomplete').contains(this.input)) {
                        this.hideSuggestions();
                    }
                });
            }

            handleInput(e) {
                const query = e.target.value.trim();
                this.currentQuery = query;

                if (query.length < 2) {
                    this.hideSuggestions();
                    this.clearLocationData();
                    return;
                }

                // Clear existing timeout
                if (searchTimeouts.has(this.inputId)) {
                    clearTimeout(searchTimeouts.get(this.inputId));
                }

                // Debounce search
                const timeoutId = setTimeout(() => {
                    this.searchLocations(query);
                }, 300);

                searchTimeouts.set(this.inputId, timeoutId);
            }

            handleKeydown(e) {
                const suggestions = this.suggestionsContainer.querySelectorAll('.location-suggestion');

                switch (e.key) {
                    case 'ArrowDown':
                        e.preventDefault();
                        this.highlightedIndex = Math.min(this.highlightedIndex + 1, suggestions.length - 1);
                        this.updateHighlight();
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        this.highlightedIndex = Math.max(this.highlightedIndex - 1, -1);
                        this.updateHighlight();
                        break;
                    case 'Enter':
                        e.preventDefault();
                        if (this.highlightedIndex >= 0 && suggestions[this.highlightedIndex]) {
                            this.selectSuggestion(suggestions[this.highlightedIndex]);
                        }
                        break;
                    case 'Escape':
                        e.preventDefault();
                        this.hideSuggestions();
                        this.input.blur();
                        break;
                }
            }

            handleFocus() {
                if (this.currentQuery.length >= 2) {
                    this.showSuggestions();
                }
            }

            handleBlur(e) {
                // Delay hiding to allow clicks on suggestions
                setTimeout(() => {
                    if (!this.suggestionsContainer.contains(document.activeElement)) {
                        this.hideSuggestions();
                    }
                }, 150);
            }

            async searchLocations(query) {
                try {
                    this.showLoading();

                    let birthDate = null;
                    const prefix = this.inputId.replace('-location', '');
                    const dateTimeInput = document.getElementById(`${prefix}-datetime`);

                    if (dateTimeInput && dateTimeInput.value) {
                        birthDate = new Date(dateTimeInput.value);
                        console.log(`Using birth date for timezone calculation: ${birthDate.toISOString()}`);
                    }

                    // Use backend API for location search
                    const response = await fetch('/api/places/search', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            query: query,
                            date: birthDate ? birthDate.toISOString() : null
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Search service unavailable');
                    }

                    const data = await response.json();

                    if (data.success && data.results) {
                        this.displaySuggestions(data.results);
                    } else {
                        this.showNoResults();
                    }

                } catch (error) {
                    console.error('Location search error:', error);
                    // Fallback to manual geocoding
                    this.showManualOption(query);
                }
            }

            showLoading() {
                this.suggestionsContainer.innerHTML = '<div class="location-loading">Searching locations...</div>';
                this.showSuggestions();
            }

            displaySuggestions(results) {
                if (results.length === 0) {
                    this.showNoResults();
                    return;
                }

                this.suggestionsContainer.innerHTML = results.map(location => `
                <div class="location-suggestion" 
                     data-name="${location.name}"
                     data-lat="${location.latitude}"
                     data-lng="${location.longitude}"
                     data-coordinatesFormattedDecimal="${location.coordinatesFormattedDecimal}"
                     data-coordinatesFormattedDMS="${location.coordinatesFormattedDMS}"
                     data-timezone="${location.timezone || 0}">
                    <div class="suggestion-name">${location.name}</div>
                    <div class="suggestion-details">
                        ${location.region ? location.region + ', ' : ''}${location.country || ''}
                        ${location.timezone ? ` (UTC ${location.timezone >= 0 ? '+' : ''}${location.timezone})` : ''}
                    </div>
                </div>
            `).join('');

                this.highlightedIndex = -1;
                this.showSuggestions();
            }

            showNoResults() {
                this.suggestionsContainer.innerHTML = `
                <div class="location-no-results">
                    No locations found. Try a different spelling or city name.
                </div>
                <div class="location-suggestion" 
                     data-manual="true"
                     data-name="${this.currentQuery}"
                     data-lat="28.6139"
                     data-lng="77.2090"
                     data-timezone="5.5">
                    <div class="suggestion-name">Use "${this.currentQuery}" anyway</div>
                    <div class="suggestion-details">Manual entry with default coordinates (Delhi, India)</div>
                </div>
            `;
                this.showSuggestions();
            }

            showManualOption(query) {
                this.suggestionsContainer.innerHTML = `
                <div class="location-no-results">
                    Search service unavailable. Using manual entry.
                </div>
                <div class="location-suggestion" 
                     data-manual="true"
                     data-name="${query}"
                     data-lat="28.6139"
                     data-lng="77.2090"
                     data-timezone="5.5">
                    <div class="suggestion-name">Use "${query}"</div>
                    <div class="suggestion-details">Manual entry with default coordinates (Delhi, India)</div>
                </div>
            `;
                this.showSuggestions();
            }

            selectSuggestion(suggestionElement) {
                const name = suggestionElement.dataset.name;
                const lat = parseFloat(suggestionElement.dataset.lat);
                const lng = parseFloat(suggestionElement.dataset.lng);
                const coordinatesFormattedDecimal = suggestionElement.dataset.coordinatesformatteddecimal;
                const coordinatesFormattedDMS = suggestionElement.dataset.coordinatesformatteddms;
                console.log("suggestionElement", suggestionElement.dataset)
                console.log("suggestionElement", coordinatesFormattedDecimal)
                console.log("suggestionElement", coordinatesFormattedDMS)

                const timezone = suggestionElement.dataset.timezone;
                const isManual = suggestionElement.dataset.manual === 'true';

                this.input.value = name;
                this.locationData = {
                    name: name,
                    latitude: lat,
                    longitude: lng,
                    coordinatesFormattedDecimal: coordinatesFormattedDecimal,
                    coordinatesFormattedDMS: coordinatesFormattedDMS,
                    timezone: timezone,
                    isManual: isManual
                };

                console.log("Location data:", this.locationData);

                this.updateLocationInfo();
                selectedLocations.set(this.inputId, this.locationData);
                this.hideSuggestions();

                // Show success notification for manual entries
                if (isManual) {
                    showNotification('Location set manually with default coordinates', 'success');
                }
            }

            updateHighlight() {
                const suggestions = this.suggestionsContainer.querySelectorAll('.location-suggestion');
                suggestions.forEach((suggestion, index) => {
                    suggestion.classList.toggle('highlighted', index === this.highlightedIndex);
                });

                // Scroll highlighted item into view
                if (this.highlightedIndex >= 0 && suggestions[this.highlightedIndex]) {
                    suggestions[this.highlightedIndex].scrollIntoView({ block: 'nearest' });
                }
            }

            showSuggestions() {
                this.suggestionsContainer.classList.add('show');
            }

            hideSuggestions() {
                this.suggestionsContainer.classList.remove('show');
                this.highlightedIndex = -1;
            }

            updateLocationInfo() {
                if (!this.locationData) return;

                const prefix = this.inputId.replace('-location', '');
                const infoContainer = document.getElementById(`${prefix}-location-info`);

                if (infoContainer) {
                    const locationDisplay = document.getElementById(`${prefix}-location-display`);
                    const timezoneDisplay = document.getElementById(`${prefix}-timezone-display`);
                    const coordinatesDisplay = document.getElementById(`${prefix}-coordinates-display`);
                    const coordinatesDegreesDisplay = document.getElementById(`${prefix}-coordinates-degrees-display`);

                    if (locationDisplay) locationDisplay.textContent = this.locationData.name;
                    if (timezoneDisplay) timezoneDisplay.textContent = `UTC ${this.locationData.timezone >= 0 ? '+' : ''}${this.locationData.timezone}`;
                    if (coordinatesDisplay) coordinatesDisplay.textContent = `${this.locationData.latitude.toFixed(4)}, ${this.locationData.longitude.toFixed(4)}`;
                    if (coordinatesDegreesDisplay) coordinatesDegreesDisplay.textContent = this.locationData.coordinatesFormattedDecimal || '-';

                    // Set hidden fields for form submission
                    infoContainer.classList.add('show');
                }
            }

            clearLocationData() {
                this.locationData = null;
                selectedLocations.delete(this.inputId);

                const prefix = this.inputId.replace('-location', '');
                const infoContainer = document.getElementById(`${prefix}-location-info`);

                if (infoContainer) {
                    infoContainer.classList.remove('show');
                }
            }

            getLocationData() {
                return this.locationData;
            }

            clear() {
                this.input.value = '';
                this.currentQuery = '';
                this.clearLocationData();
                this.hideSuggestions();
            }
        }

        // Initialize application
        document.addEventListener('DOMContentLoaded', function () {
            setupEventListeners();
            initializeLocationAutocomplete();
            showSection('services');
        });

        function setupEventListeners() {
            // Navigation pills
            document.querySelectorAll('.nav-pill').forEach(pill => {
                pill.addEventListener('click', function () {
                    const section = this.dataset.section;
                    showSection(section);
                });
            });

            // Service cards
            document.querySelectorAll('.service-card').forEach(card => {
                card.addEventListener('click', function () {
                    const service = this.dataset.service;
                    showSection(service === 'astrology' ? 'birth-chart' : service);
                });
            });

            // Form submissions
            document.getElementById('birth-chart-form').addEventListener('submit', handleBirthChartSubmit);
            document.getElementById('compatibility-form').addEventListener('submit', handleCompatibilitySubmit);
            document.getElementById('behavior-form').addEventListener('submit', handleBehaviorSubmit);
        }

        function initializeLocationAutocomplete() {
            // Initialize all location autocomplete inputs
            const locationInputIds = [
                'birth-location',
                'person1-location',
                'person2-location',
                'behavior-location'
            ];

            locationInputIds.forEach(id => {
                try {
                    const autocomplete = new LocationAutocomplete(id);
                    locationInstances.set(id, autocomplete);
                } catch (error) {
                    console.error(`Failed to initialize autocomplete for ${id}:`, error);
                }
            });
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            animation: slideInRight 0.3s ease;
            max-width: 300px;
            ${type === 'success' ? 'background: linear-gradient(135deg, #28a745, #20c997);' : ''}
            ${type === 'error' ? 'background: linear-gradient(135deg, #dc3545, #e74c3c);' : ''}
        `;
            notification.textContent = message;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Add CSS for notifications
        const notificationStyle = document.createElement('style');
        notificationStyle.textContent = `
        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOutRight {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
    `;
        document.head.appendChild(notificationStyle);

        // Form clearing function
        function clearForm(formType) {
            const form = document.getElementById(`${formType}-form`);
            if (!form) return;

            // Clear all visible inputs in the form
            const inputs = form.querySelectorAll('input[type="text"], input[type="datetime-local"], select');
            inputs.forEach(input => {
                input.value = '';
                input.classList.remove('error');
            });

            // Clear all hidden inputs
            const hiddenInputs = form.querySelectorAll('input[type="hidden"]');
            hiddenInputs.forEach(input => {
                input.value = '';
            });

            // Clear location autocomplete instances
            const locationInputs = form.querySelectorAll('.location-input');
            locationInputs.forEach(input => {
                const autocomplete = locationInstances.get(input.id);
                if (autocomplete) {
                    autocomplete.clear();
                }
            });

            // Clear all location info displays
            const locationInfos = form.querySelectorAll('.location-info');
            locationInfos.forEach(info => {
                info.classList.remove('show');
            });

            // Remove any error messages
            const errorMessages = form.querySelectorAll('.error-message');
            errorMessages.forEach(error => error.remove());

            // Remove any success messages
            const successMessages = form.querySelectorAll('.success-message');
            successMessages.forEach(success => success.remove());

            // Show success message
            showClearMessage(form);
            showNotification('Form cleared successfully!', 'success');

            // Scroll to top of form
            form.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        function showClearMessage(form) {
            const existingMessage = form.querySelector('.success-message');
            if (existingMessage) {
                existingMessage.remove();
            }

            const message = document.createElement('div');
            message.className = 'success-message';
            message.innerHTML = `
            <i class="fas fa-check-circle"></i>
            <span>Form has been cleared successfully. You can now enter new information.</span>
        `;

            // Insert after form title
            const formTitle = form.querySelector('.form-title');
            if (formTitle) {
                formTitle.insertAdjacentElement('afterend', message);
            }

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (message.parentNode) {
                    message.style.animation = 'fadeOut 0.5s ease';
                    setTimeout(() => message.remove(), 500);
                }
            }, 5000);
        }

        async function getLocationFromSelection(inputId) {
            const autocomplete = locationInstances.get(inputId);
            const locationData = selectedLocations.get(inputId);

            if (!locationData) {
                throw new Error('Please select a valid location');
            }

            return {
                latitude: locationData.latitude,
                longitude: locationData.longitude,
                timezone: locationData.timezone,
                name: locationData.name
            };
        }

        function prepareDateTimeData(datetimeInput) {
            const date = new Date(datetimeInput);

            return {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate(),
                hour: date.getHours(),
                minute: date.getMinutes()
            };
        }

        function showSection(sectionName) {
            currentSection = sectionName;

            // Hide all sections
            document.querySelectorAll('.services-grid, .form-section, .results-section').forEach(el => {
                el.classList.remove('active');
                el.style.display = 'none';
            });

            // Update navigation pills
            document.querySelectorAll('.nav-pill').forEach(pill => {
                pill.classList.remove('active');
                if (pill.dataset.section === sectionName) {
                    pill.classList.add('active');
                }
            });

            // Show selected section
            if (sectionName === 'services') {
                document.querySelector('.services-grid').style.display = 'grid';
            } else if (sectionName === 'results') {
                document.getElementById('results-section').classList.add('active');
                document.getElementById('results-section').style.display = 'block';
            } else {
                const section = document.getElementById(`${sectionName}-section`);
                if (section) {
                    section.classList.add('active');
                    section.style.display = 'block';
                }
            }
        }

        async function handleBirthChartSubmit(event) {
            event.preventDefault();

            try {
                setLoadingState(true, 'birth-chart');

                const formData = new FormData(event.target);
                const birthDateTime = formData.get('birth-datetime');

                if (!birthDateTime) {
                    throw new Error('Please enter birth date and time');
                }

                // Get location data
                const locationData = await getLocationFromSelection('birth-location');

                // Prepare date/time data
                const dateTimeData = prepareDateTimeData(birthDateTime);

                // Populate hidden fields for API compatibility
                document.getElementById('birth-year').value = dateTimeData.year;
                document.getElementById('birth-month').value = dateTimeData.month;
                document.getElementById('birth-day').value = dateTimeData.day;
                document.getElementById('birth-hour').value = dateTimeData.hour;
                document.getElementById('birth-minute').value = dateTimeData.minute;
                document.getElementById('birth-timezone').value = locationData.timezone;
                document.getElementById('birth-latitude').value = locationData.latitude;
                document.getElementById('birth-longitude').value = locationData.longitude;

                // Prepare data for API
                const apiData = {
                    year: dateTimeData.year,
                    month: dateTimeData.month,
                    day: dateTimeData.day,
                    hour: dateTimeData.hour,
                    minute: dateTimeData.minute,
                    timezone: locationData.timezone,
                    latitude: locationData.latitude,
                    longitude: locationData.longitude
                };

                const response = await fetch('/api/astrology/calculate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(apiData)
                });

                const result = await response.json();

                if (result.success) {
                    displayBirthChartResults(result.data);
                    showNotification('Birth chart calculated successfully!', 'success');
                } else {
                    showError(result.errors || ['An error occurred during calculation'], 'birth-chart');
                }
            } catch (error) {
                console.error('Birth chart submission error:', error);
                showError(['Error: ' + error.message], 'birth-chart');
            } finally {
                setLoadingState(false, 'birth-chart');
            }
        }

        async function handleCompatibilitySubmit(event) {
            event.preventDefault();

            try {
                setLoadingState(true, 'compatibility');

                const formData = new FormData(event.target);

                // Get person 1 data
                const person1DateTime = formData.get('person1-datetime');
                const person1Gender = formData.get('person1-gender');

                if (!person1DateTime || !person1Gender) {
                    throw new Error('Please fill all Person 1 details');
                }

                const person1LocationData = await getLocationFromSelection('person1-location');
                const person1DateTimeData = prepareDateTimeData(person1DateTime);

                // Get person 2 data
                const person2DateTime = formData.get('person2-datetime');
                const person2Gender = formData.get('person2-gender');

                if (!person2DateTime || !person2Gender) {
                    throw new Error('Please fill all Person 2 details');
                }

                const person2LocationData = await getLocationFromSelection('person2-location');
                const person2DateTimeData = prepareDateTimeData(person2DateTime);

                // Populate hidden fields
                document.getElementById('person1-year').value = person1DateTimeData.year;
                document.getElementById('person1-month').value = person1DateTimeData.month;
                document.getElementById('person1-day').value = person1DateTimeData.day;
                document.getElementById('person1-hour').value = person1DateTimeData.hour;
                document.getElementById('person1-minute').value = person1DateTimeData.minute;
                document.getElementById('person1-timezone').value = person1LocationData.timezone;
                document.getElementById('person1-latitude').value = person1LocationData.latitude;
                document.getElementById('person1-longitude').value = person1LocationData.longitude;

                document.getElementById('person2-year').value = person2DateTimeData.year;
                document.getElementById('person2-month').value = person2DateTimeData.month;
                document.getElementById('person2-day').value = person2DateTimeData.day;
                document.getElementById('person2-hour').value = person2DateTimeData.hour;
                document.getElementById('person2-minute').value = person2DateTimeData.minute;
                document.getElementById('person2-timezone').value = person2LocationData.timezone;
                document.getElementById('person2-latitude').value = person2LocationData.latitude;
                document.getElementById('person2-longitude').value = person2LocationData.longitude;

                const data = {
                    person1: {
                        name: formData.get('person1-name'),
                        gender: person1Gender,
                        birthDate: person1DateTime.split('T')[0],
                        birthTime: person1DateTime.split('T')[1],
                        latitude: person1LocationData.latitude,
                        longitude: person1LocationData.longitude,
                        timezone: person1LocationData.timezone,
                        year: person1DateTimeData.year,
                        month: person1DateTimeData.month,
                        day: person1DateTimeData.day,
                        hour: person1DateTimeData.hour,
                        minute: person1DateTimeData.minute
                    },
                    person2: {
                        name: formData.get('person2-name'),
                        gender: person2Gender,
                        birthDate: person2DateTime.split('T')[0],
                        birthTime: person2DateTime.split('T')[1],
                        latitude: person2LocationData.latitude,
                        longitude: person2LocationData.longitude,
                        timezone: person2LocationData.timezone,
                        year: person2DateTimeData.year,
                        month: person2DateTimeData.month,
                        day: person2DateTimeData.day,
                        hour: person2DateTimeData.hour,
                        minute: person2DateTimeData.minute
                    }
                };

                const response = await fetch('/api/compare-jadhagam-porutham', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    displayCompatibilityResults(result.data);
                    showNotification('Compatibility analysis completed!', 'success');
                } else {
                    showError([result.message || 'An error occurred'], 'compatibility');
                }
            } catch (error) {
                console.error('Compatibility submission error:', error);
                showError(['Error: ' + error.message], 'compatibility');
            } finally {
                setLoadingState(false, 'compatibility');
            }
        }

        async function handleBehaviorSubmit(event) {
            event.preventDefault();

            try {
                setLoadingState(true, 'behavior');

                const formData = new FormData(event.target);
                const behaviorDateTime = formData.get('behavior-datetime');

                if (!behaviorDateTime) {
                    throw new Error('Please enter birth date and time');
                }

                // Get location data
                const locationData = await getLocationFromSelection('behavior-location');

                // Prepare date/time data
                const dateTimeData = prepareDateTimeData(behaviorDateTime);

                // Populate hidden fields for API compatibility
                document.getElementById('behavior-year').value = dateTimeData.year;
                document.getElementById('behavior-month').value = dateTimeData.month;
                document.getElementById('behavior-day').value = dateTimeData.day;
                document.getElementById('behavior-hour').value = dateTimeData.hour;
                document.getElementById('behavior-minute').value = dateTimeData.minute;
                document.getElementById('behavior-timezone').value = locationData.timezone;
                document.getElementById('behavior-latitude').value = locationData.latitude;
                document.getElementById('behavior-longitude').value = locationData.longitude;

                // Prepare data for API
                const apiData = {
                    year: dateTimeData.year,
                    month: dateTimeData.month,
                    day: dateTimeData.day,
                    hour: dateTimeData.hour,
                    minute: dateTimeData.minute,
                    timezone: locationData.timezone,
                    latitude: locationData.latitude,
                    longitude: locationData.longitude
                };

                const response = await fetch('/api/behavior', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(apiData)
                });

                const result = await response.json();

                if (result.success) {
                    displayBehaviorResults(result);
                    showNotification('Behavior prediction completed!', 'success');
                } else {
                    showError([result.error || 'An error occurred'], 'behavior');
                }
            } catch (error) {
                console.error('Behavior submission error:', error);
                showError(['Error: ' + error.message], 'behavior');
            } finally {
                setLoadingState(false, 'behavior');
            }
        }

        function displayBirthChartResults(data) {
            const tabs = [
                { id: 'overview', name: 'Overview', icon: 'fas fa-chart-line' },
                { id: 'birth-chart', name: 'Birth Chart', icon: 'fas fa-chart-pie' },
                { id: 'navamsa-chart', name: 'Navamsa Chart', icon: 'fas fa-chart-area' },
                { id: 'planetary', name: 'Planetary Positions', icon: 'fas fa-globe' }
            ];

            showResultsContainer('Birth Chart Analysis Results', tabs);

            // Overview tab content
            const overviewContent = `
            <div class="info-grid">
                <div class="info-card">
                    <div class="info-title"><i class="fas fa-moon"></i> Rashi (Moon Sign)</div>
                    <div class="info-value">${data.rasi?.name || 'N/A'} ${data.rasi?.english ? `(${data.rasi.english})` : ''}</div>
                    <div style="font-size: 0.9rem; color: #666; margin-top: 8px;">
                        <strong>Lord:</strong> ${data.rasi?.lord || 'N/A'}<br>
                        <strong>Element:</strong> ${data.rasi?.element || 'N/A'}
                    </div>
                </div>
                <div class="info-card">
                    <div class="info-title"><i class="fas fa-star"></i> Nakshatra</div>
                    <div class="info-value">${data.nakshatra?.name || 'N/A'}</div>
                    <div style="font-size: 0.9rem; color: #666; margin-top: 8px;">
                        <strong>Lord:</strong> ${data.nakshatra?.lord || 'N/A'}<br>
                        <strong>Pada:</strong> ${data.nakshatra?.pada || 'N/A'}
                    </div>
                </div>
                <div class="info-card">
                    <div class="info-title"><i class="fas fa-arrow-up"></i> Lagna (Ascendant)</div>
                    <div class="info-value">${data.lagna?.name || 'N/A'} ${data.lagna?.english ? `(${data.lagna.english})` : ''}</div>
                    <div style="font-size: 0.9rem; color: #666; margin-top: 8px;">
                        <strong>Lord:</strong> ${data.lagna?.lord || 'N/A'}<br>
                        <strong>Element:</strong> ${data.lagna?.element || 'N/A'}
                    </div>
                </div>
                <div class="info-card">
                    <div class="info-title"><i class="fas fa-compass"></i> Ayanamsa</div>
                    <div class="info-value">${data.planetaryPositions?.ayanamsa || 'N/A'}°</div>
                    <div style="font-size: 0.9rem; color: #666; margin-top: 8px;">
                        Astronomical calculation reference
                    </div>
                </div>
            </div>
        `;

            // Birth Chart tab content
            const birthChartContent = `
            <div class="chart-card">
                <div class="chart-title"><i class="fas fa-chart-pie"></i> Birth Chart (Rashi Chart)</div>
                ${generateSouthIndianChart(data.birthChart, data.lagna, 'Birth Chart')}
            </div>
        `;

            // Navamsa Chart tab content
            const navamsaChartContent = `
            <div class="chart-card">
                <div class="chart-title"><i class="fas fa-chart-area"></i> Navamsa Chart (D9)</div>
                ${generateSouthIndianChart(data.navamsaChart, data.navamsaLagna, 'Navamsa Chart')}
            </div>
        `;

            // Planetary positions content
            const planetaryContent = `
            <div class="info-grid">
                ${data.planetaryPositions?.rawPositions ? Object.entries(data.planetaryPositions.rawPositions).map(([planet, position]) => `
                    <div class="info-card">
                        <div class="info-title"><i class="fas fa-globe"></i> ${planet}</div>
                        <div class="info-value">${position}°</div>
                    </div>
                `).join('') : '<div class="info-card"><div class="info-title">No planetary data available</div></div>'}
            </div>
        `;

            // Set tab contents
            setTabContent('overview', overviewContent);
            setTabContent('birth-chart', birthChartContent);
            setTabContent('navamsa-chart', navamsaChartContent);
            setTabContent('planetary', planetaryContent);

            showSection('results');
        }

        function displayCompatibilityResults(data) {
            const tabs = [
                { id: 'compatibility', name: 'Compatibility Score', icon: 'fas fa-heart' },
                { id: 'poruthams', name: 'Poruthams', icon: 'fas fa-list-check' },
                { id: 'analysis', name: 'Analysis', icon: 'fas fa-chart-line' }
            ];

            showResultsContainer('Marriage Compatibility Results', tabs);

            // Compatibility Score content
            const compatibilityContent = `
            <div class="compatibility-score">
                <div class="score-circle">
                    <div class="score-inner">${data.compatibility?.overallPercentage || 0}%</div>
                </div>
                <h3 style="color: #667eea; font-family: 'Playfair Display', serif; margin-bottom: 10px;">
                    ${data.compatibility?.overallGrade || 'Unknown'} Match
                </h3>
                <p style="color: #666; font-size: 1.1rem;">${data.compatibility?.recommendationStatus || 'Analysis complete'}</p>
            </div>
            <div class="info-grid">
                <div class="info-card">
                    <div class="info-title"><i class="fas fa-star"></i> Total Score</div>
                    <div class="info-value">${data.compatibility?.totalScore || 0} / ${data.compatibility?.maxPossibleScore || 0}</div>
                </div>
            </div>
        `;

            // Poruthams content
            const poruthamsContent = data.poruthams ? `
            <div class="porutham-grid">
                ${Object.entries(data.poruthams).map(([name, porutham]) => {
                const compatible = porutham.status === "Excellent" || porutham.status === "Average";
                return `
                        <div class="porutham-card">
                            <div class="porutham-header">
                                <div class="porutham-name">${porutham.name}</div>
                                <div class="porutham-status ${compatible ? 'compatible' : 'incompatible'}">
                                    <i class="fas fa-${compatible ? 'check' : 'times'}"></i>
                                    ${compatible ? 'Compatible' : 'Not Compatible'}
                                </div>
                            </div>
                            <div style="font-size: 0.9rem; color: #666; margin-top: 12px;">
                                <i class="fas fa-star"></i> Score: ${porutham.score} / ${porutham.maxScore}
                            </div>
                            <div style="font-size: 0.95rem; color: #333; margin-top: 8px; line-height: 1.5;">
                                ${porutham.description}
                            </div>
                        </div>
                    `;
            }).join('')}
            </div>
        ` : '<div class="info-card"><div class="info-title">No porutham data available</div></div>';

            // Analysis content
            const analysisContent = data.analysis ? `
            <div class="info-card" style="margin-bottom: 25px;">
                <div class="info-title"><i class="fas fa-chart-line"></i> Overall Assessment</div>
                <div class="info-value" style="line-height: 1.7;">
                    <strong>Rating:</strong> ${data.analysis.overallAssessment?.rating || 'N/A'}<br>
                    <strong>Recommendation:</strong> ${data.analysis.overallAssessment?.recommendation || 'N/A'}<br>
                    <strong>Description:</strong> ${data.analysis.overallAssessment?.description || 'N/A'}
                </div>
            </div>
        ` : '<div class="info-card"><div class="info-title">No analysis data available</div></div>';

            // Set tab contents
            setTabContent('compatibility', compatibilityContent);
            setTabContent('poruthams', poruthamsContent);
            setTabContent('analysis', analysisContent);

            showSection('results');
        }

        function displayBehaviorResults(data) {
            const tabs = [
                { id: 'personality', name: 'Personality', icon: 'fas fa-user' },
                { id: 'behavior', name: 'Behavior', icon: 'fas fa-brain' },
                { id: 'predictions', name: 'Predictions', icon: 'fas fa-crystal-ball' }
            ];

            showResultsContainer('Behavior Prediction Results', tabs);

            // Helper function to render nested data
            function renderObject(obj) {
                if (typeof obj !== 'object' || obj === null) {
                    return obj;
                }

                if (Array.isArray(obj)) {
                    return `<ul>${obj.map(v => `<li>${renderObject(v)}</li>`).join('')}</ul>`;
                }

                return `
                <ul>
                    ${Object.entries(obj).map(([k, v]) => `
                        <li>
                            <strong>${k.replace(/([A-Z])/g, ' $1').trim()}:</strong> 
                            ${typeof v === 'object' ? renderObject(v) : v}
                        </li>
                    `).join('')}
                </ul>
            `;
            }

            const behaviorData = data.data || data;

            const personalityContent = behaviorData.personality ? `
            <div class="info-grid">
                ${Object.entries(behaviorData.personality).map(([trait, value]) => `
                    <div class="info-card">
                        <div class="info-title"><i class="fas fa-user-circle"></i> ${trait.replace(/([A-Z])/g, ' $1').trim()}</div>
                        <div class="info-value">${renderObject(value)}</div>
                    </div>
                `).join('')}
            </div>
        ` : '<div class="info-card"><div class="info-title">No personality data available</div></div>';

            const behaviorContent = behaviorData.behavioral ? `
            <div class="info-grid">
                ${Object.entries(behaviorData.behavioral).map(([aspect, value]) => `
                    <div class="info-card">
                        <div class="info-title"><i class="fas fa-brain"></i> ${aspect.replace(/([A-Z])/g, ' $1').trim()}</div>
                        <div class="info-value">${renderObject(value)}</div>
                    </div>
                `).join('')}
            </div>
        ` : '<div class="info-card"><div class="info-title">No behavioral data available</div></div>';

            const predictionsContent = behaviorData.future ? `
            <div class="info-grid">
                ${Object.entries(behaviorData.future).map(([category, prediction]) => `
                    <div class="info-card">
                        <div class="info-title"><i class="fas fa-crystal-ball"></i> ${category.replace(/([A-Z])/g, ' $1').trim()}</div>
                        <div class="info-value" style="line-height: 1.6;">${renderObject(prediction)}</div>
                    </div>
                `).join('')}
            </div>
        ` : '<div class="info-card"><div class="info-title">No prediction data available</div></div>';

            setTabContent('personality', personalityContent);
            setTabContent('behavior', behaviorContent);
            setTabContent('predictions', predictionsContent);

            showSection('results');
        }

        // Enhanced South Indian Chart Generation Function
        function generateSouthIndianChart(chartData, lagnaData, chartType) {
            if (!chartData || typeof chartData !== 'object') {
                return '<p style="text-align: center; color: #666; padding: 40px;">Chart data not available</p>';
            }

            console.log('Chart Data:', chartData);
            console.log('Lagna Data:', lagnaData);
            console.log('Chart Type:', chartType);

            // Initialize arrays
            let houses = Array(12).fill(null).map(() => ({ planets: [], sign: '', signNumber: null }));
            let lagnaSignNumber = 1; // Default to Aries
            let lagnaHouse = 1;
            let lagnaSign = '';

            // First pass: Extract house data and find Lagna info (but don't force it to position 1)
            if (chartData.houses) {
                // If houses is an array, use it directly
                if (Array.isArray(chartData.houses)) {
                    chartData.houses.forEach((houseData, index) => {
                        if (index < 12) {
                            houses[index] = {
                                planets: houseData.planets || [],
                                sign: houseData.sign || '',
                                signNumber: houseData.signNumber || (index + 1)
                            };

                            // Find Lagna house and sign number
                            if (houseData.planets && houseData.planets.includes('Lagna')) {
                                lagnaHouse = index + 1;
                                lagnaSignNumber = houseData.signNumber || (index + 1);
                                lagnaSign = houseData.sign || '';
                            }
                        }
                    });
                } else {
                    // If houses is an object, convert to array
                    Object.entries(chartData.houses).forEach(([houseKey, houseData]) => {
                        const houseNumber = parseInt(houseKey);
                        const houseIndex = houseNumber - 1;

                        if (houseIndex >= 0 && houseIndex < 12) {
                            houses[houseIndex] = {
                                planets: houseData.planets || [],
                                sign: houseData.sign || '',
                                signNumber: houseData.signNumber || null
                            };

                            // Find Lagna house and sign number
                            if (houseData.planets && houseData.planets.includes('Lagna')) {
                                lagnaHouse = houseNumber;
                                lagnaSignNumber = houseData.signNumber || 1;
                                lagnaSign = houseData.sign || '';
                            }
                        }
                    });
                }
            }

            // Use the first house's sign number for position 1 (not Lagna)
            const firstHouseSignNumber = houses[0].signNumber || 1;

            // Convert sign names if needed
            if (signMapping[lagnaSign]) {
                lagnaSign = signMapping[lagnaSign];
            } else if (signNumbers[lagnaSignNumber]) {
                lagnaSign = signNumbers[lagnaSignNumber];
            }

            console.log('First House Sign Number:', firstHouseSignNumber);
            console.log('Lagna House:', lagnaHouse, 'Lagna Sign Number:', lagnaSignNumber, 'Lagna Sign:', lagnaSign);

            // South Indian chart positions (fixed layout)
            const southIndianPositions = [
                { position: 1, gridRow: 1, gridCol: 2 },   // Top center-left
                { position: 2, gridRow: 1, gridCol: 3 },   // Top center-right
                { position: 3, gridRow: 1, gridCol: 4 },   // Top right
                { position: 4, gridRow: 2, gridCol: 4 },   // Right center-top
                { position: 5, gridRow: 3, gridCol: 4 },   // Right center-bottom
                { position: 6, gridRow: 4, gridCol: 4 },   // Bottom right
                { position: 7, gridRow: 4, gridCol: 3 },   // Bottom center-right
                { position: 8, gridRow: 4, gridCol: 2 },   // Bottom center-left
                { position: 9, gridRow: 4, gridCol: 1 },   // Bottom left
                { position: 10, gridRow: 3, gridCol: 1 },  // Left center-bottom
                { position: 11, gridRow: 2, gridCol: 1 },  // Left center-top
                { position: 12, gridRow: 1, gridCol: 1 }   // Top left
            ];

            // Calculate sign-to-position mapping based on first house sign
            // The first house sign should appear in position 1
            const signToPosition = {};
            for (let i = 0; i < 12; i++) {
                let signNum = ((firstHouseSignNumber - 1 + i) % 12) + 1;
                signToPosition[signNum] = i + 1; // Position 1-12
            }

            console.log('Sign to Position mapping:', signToPosition);

            // Create position data array where index = position-1
            const positionData = Array(12).fill(null).map(() => ({
                planets: [],
                sign: '',
                signNumber: null,
                houseNumber: null
            }));

            // Map houses to positions based on their sign numbers
            houses.forEach((houseData, houseIndex) => {
                const houseNumber = houseIndex + 1;
                const signNumber = houseData.signNumber;

                if (signNumber && signToPosition[signNumber]) {
                    const position = signToPosition[signNumber];
                    const positionIndex = position - 1;

                    if (positionIndex >= 0 && positionIndex < 12) {
                        positionData[positionIndex] = {
                            planets: houseData.planets,
                            sign: houseData.sign,
                            signNumber: signNumber,
                            houseNumber: houseNumber
                        };
                    }
                }
            });

            console.log('Position Data:', positionData);

            const createPlanetItems = (planetList) => {
                if (!planetList || planetList.length === 0) return '';
                return planetList.map(planet => {
                    const cleanPlanet = planet.trim();
                    const abbr = planetAbbreviations[cleanPlanet] || cleanPlanet.substring(0, 2);
                    // Add special styling for Lagna
                    const isLagna = cleanPlanet === 'Lagna';
                    return `<div class="planet-item ${isLagna ? 'lagna-planet' : ''}">${abbr}</div>`;
                }).join('');
            };

            // Get sign name for display
            const getSignName = (signName, signNumber) => {
                if (signMapping[signName]) {
                    return signMapping[signName];
                }
                if (signNumbers[signNumber]) {
                    return signNumbers[signNumber];
                }
                return signName || 'Unknown';
            };

            // Determine center text based on chart type
            let centerTitle, centerValue, centerEnglish;
            if (chartType === 'Navamsa Chart') {
                centerTitle = '';
                centerValue = '';
                centerEnglish = 'Navamsa Chart';
            } else {
                centerTitle = '';
                centerValue = '';
                centerEnglish = 'Rasi Chart';
            }

            const chartHtml = `
        <div class="south-indian-chart">
            ${southIndianPositions.map((pos) => {
                const positionIndex = pos.position - 1;
                const data = positionData[positionIndex];
                const hasLagna = data.planets?.includes('Lagna');
                const displaySignName = getSignName(data.sign, data.signNumber);

                return `
                    <div class="chart-house position-${pos.position} ${hasLagna ? 'has-lagna' : ''}" 
                         style="grid-row: ${pos.gridRow}; grid-column: ${pos.gridCol};"
                         title="Position ${pos.position}: ${displaySignName} (House ${data.houseNumber || 'N/A'}) - Planets: ${data.planets?.join(', ') || 'None'}">
                        <div class="house-number">${data.houseNumber || '?'}</div>
                        <div class="planet-list">${createPlanetItems(data.planets)}</div>
                        <div class="sign-name">${displaySignName}</div>
                    </div>
                `;
            }).join('')}
            
            <div class="chart-center" style="grid-row: 2 / 4; grid-column: 2 / 4;">
                <div class="center-english">${centerEnglish}</div>
                <div class="center-title" style="margin-top: 10px;">लग्न</div>
            </div>
        </div>
        <div class="chart-legend">
            <div style="margin-bottom: 15px; font-weight: 600; color: #667eea; text-align: center;">
                <i class="fas fa-info-circle"></i> Planet Abbreviations
            </div>
            <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 8px;">
                ${Object.entries(planetAbbreviations).map(([planet, abbr]) =>
                `<span class="legend-item"><span class="planet-abbr">${abbr}</span> = ${planet}</span>`
            ).join('')}
            </div>
            <div style="margin-top: 10px; font-size: 11px; color: #888; text-align: center;">
                <i class="fas fa-star"></i> Lagna (${lagnaSign}) is in Position ${signToPosition[lagnaSignNumber] || '?'}, Sign Number ${lagnaSignNumber}
            </div>
        </div>

        <style>
            /* Special styling for Lagna planet */
            .planet-item.lagna-planet {
                background-color: #ff6b35 !important;
                color: white !important;
                font-weight: bold !important;
                border: 2px solid #ff4500 !important;
                box-shadow: 0 0 8px rgba(255, 107, 53, 0.6) !important;
            }

            /* Special styling for houses containing Lagna */
            .chart-house.has-lagna {
                border: 2px solid #ff6b35 !important;
                background-color: rgba(255, 107, 53, 0.1) !important;
            }

            /* Default planet styling */
            .planet-item {
                background-color: #667eea;
                color: white;
                padding: 2px 4px;
                border-radius: 3px;
                font-size: 14px;
                margin: 1px;
                font-weight: 500;
                border: 1px solid #5a67d8;
            }
        </style>
    `;

            return chartHtml;
        }

        function showResultsContainer(title, tabs) {
            document.getElementById('result-title').textContent = title;

            const tabsContainer = document.getElementById('result-tabs');
            tabsContainer.innerHTML = tabs.map((tab, index) => `
            <button class="tab-btn ${index === 0 ? 'active' : ''}" data-tab="${tab.id}">
                <i class="${tab.icon}"></i> ${tab.name}
            </button>
        `).join('');

            const contentContainer = document.getElementById('result-content');
            contentContainer.innerHTML = tabs.map((tab, index) => `
            <div id="tab-${tab.id}" class="tab-content ${index === 0 ? 'active' : ''}">
                <!-- Content will be set by specific display functions -->
            </div>
        `).join('');

            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const tabId = this.dataset.tab;
                    showTab(tabId);
                });
            });
        }

        function showTab(tabId) {
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.tab === tabId) {
                    btn.classList.add('active');
                }
            });

            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });

            const targetTab = document.getElementById(`tab-${tabId}`);
            if (targetTab) {
                targetTab.classList.add('active');
            }
        }

        function setTabContent(tabId, content) {
            const tabElement = document.getElementById(`tab-${tabId}`);
            if (tabElement) {
                tabElement.innerHTML = content;
            }
        }

        function setLoadingState(loading, formType) {
            const form = document.getElementById(`${formType}-form`);
            if (!form) return;

            const button = form.querySelector('.btn-primary');
            const spinner = button.querySelector('.loading-spinner');
            const text = button.querySelector('.btn-text');

            if (loading) {
                button.disabled = true;
                spinner.style.display = 'inline-block';
                text.textContent = 'Processing...';
                button.style.background = 'linear-gradient(135deg, #9ca3f0 0%, #a478d1 100%)';
            } else {
                button.disabled = false;
                spinner.style.display = 'none';
                button.style.background = 'var(--primary-gradient)';

                const originalTexts = {
                    'birth-chart': 'Analyze Birth Chart',
                    'compatibility': 'Analyze Compatibility',
                    'behavior': 'Predict Behavior'
                };
                text.textContent = originalTexts[formType] || 'Submit';
            }
        }

        function showError(errors, formType) {
            const errorHtml = `
            <div class="error-message">
                <h4><i class="fas fa-exclamation-triangle"></i> Error Occurred</h4>
                <ul style="margin-top: 15px; padding-left: 20px;">
                    ${errors.map(error => `<li style="margin-bottom: 5px;">${error}</li>`).join('')}
                </ul>
            </div>
        `;

            const activeForm = document.getElementById(`${formType}-section`);
            if (activeForm) {
                const existingError = activeForm.querySelector('.error-message');
                if (existingError) {
                    existingError.remove();
                }

                const form = activeForm.querySelector('form');
                form.insertAdjacentHTML('afterend', errorHtml);

                setTimeout(() => {
                    const errorElement = activeForm.querySelector('.error-message');
                    if (errorElement) {
                        errorElement.style.animation = 'fadeOut 0.5s ease';
                        setTimeout(() => errorElement.remove(), 500);
                    }
                }, 10000);
            }
        }

        // Utility functions
        function smoothScrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        // Enhanced showSection with smooth scroll
        const originalShowSection = showSection;
        showSection = function (sectionName) {
            originalShowSection(sectionName);
            smoothScrollToTop();
        };

        // Keyboard navigation
        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                if (currentSection !== 'services') {
                    showSection('services');
                }
            }
        });

        // Keyboard shortcuts for form clearing (Ctrl+R for reset)
        document.addEventListener('keydown', function (event) {
            if (event.ctrlKey && event.key === 'r' && !event.shiftKey) {
                event.preventDefault();
                const currentForm = document.querySelector('.form-section.active');
                if (currentForm) {
                    const formId = currentForm.id.replace('-section', '');
                    clearForm(formId);
                    showNotification('Form cleared with Ctrl+R shortcut!', 'success');
                }
            }
        });

        // Auto-save form data to localStorage (optional feature)
        function autoSaveForm(formType) {
            const form = document.getElementById(`${formType}-form`);
            if (!form) return;

            const formData = new FormData(form);
            const data = {};

            for (let [key, value] of formData.entries()) {
                if (value.trim() !== '') {
                    data[key] = value;
                }
            }

            if (Object.keys(data).length > 0) {
                localStorage.setItem(`astrology_${formType}_data`, JSON.stringify(data));
            }
        }

        // Load saved form data from localStorage
        function loadSavedFormData(formType) {
            const savedData = localStorage.getItem(`astrology_${formType}_data`);
            if (!savedData) return;

            try {
                const data = JSON.parse(savedData);
                const form = document.getElementById(`${formType}-form`);

                Object.entries(data).forEach(([key, value]) => {
                    const input = form.querySelector(`[name="${key}"]`);
                    if (input && input.type !== 'hidden') {
                        input.value = value;
                    }
                });

                showNotification('Previous form data restored!', 'success');
            } catch (error) {
                console.error('Error loading saved form data:', error);
            }
        }

        // Clear saved form data
        function clearSavedFormData(formType) {
            localStorage.removeItem(`astrology_${formType}_data`);
        }

        // Enhanced clear form function with confirmation
        function clearFormWithConfirmation(formType) {
            const form = document.getElementById(`${formType}-form`);
            if (!form) return;

            // Check if form has data
            const hasData = Array.from(form.querySelectorAll('input[type="text"], input[type="datetime-local"], select'))
                .some(input => input.value.trim() !== '');

            if (hasData) {
                if (confirm('Are you sure you want to clear all form data? This action cannot be undone.')) {
                    clearForm(formType);
                    clearSavedFormData(formType);
                }
            } else {
                showNotification('Form is already empty!', 'error');
            }
        }

        // Add double-click to clear functionality
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.btn-clear').forEach(btn => {
                let clickCount = 0;
                btn.addEventListener('click', function (e) {
                    clickCount++;
                    if (clickCount === 1) {
                        setTimeout(() => {
                            if (clickCount === 1) {
                                // Single click - normal clear
                                const formType = this.closest('form').id.replace('-form', '');
                                clearForm(formType);
                            } else if (clickCount === 2) {
                                // Double click - clear with confirmation
                                const formType = this.closest('form').id.replace('-form', '');
                                clearFormWithConfirmation(formType);
                            }
                            clickCount = 0;
                        }, 300);
                    }
                });
            });
        });

        // Form validation enhancement
        function validateForm(formType) {
            const form = document.getElementById(`${formType}-form`);
            const errors = [];

            // Common validation for all forms
            const requiredInputs = form.querySelectorAll('input[required], select[required]');
            requiredInputs.forEach(input => {
                if (!input.value.trim()) {
                    errors.push(`${input.previousElementSibling.textContent.replace(/[^\w\s]/gi, '').trim()} is required`);
                    input.classList.add('error');
                } else {
                    input.classList.remove('error');
                }
            });

            // Specific validation for compatibility form
            if (formType === 'compatibility') {
                const person1DateTime = document.getElementById('person1-datetime').value;
                const person2DateTime = document.getElementById('person2-datetime').value;

                if (person1DateTime && person2DateTime) {
                    const date1 = new Date(person1DateTime);
                    const date2 = new Date(person2DateTime);
                    const ageDiff = Math.abs(date1 - date2) / (1000 * 60 * 60 * 24 * 365.25);

                    if (ageDiff > 50) {
                        errors.push('Age difference between persons is very large (>50 years). Please verify the dates.');
                    }
                }
            }

            // Date validation
            const dateInputs = form.querySelectorAll('input[type="datetime-local"]');
            dateInputs.forEach(input => {
                if (input.value) {
                    const inputDate = new Date(input.value);
                    const now = new Date();
                    const hundredYearsAgo = new Date(now.getFullYear() - 100, now.getMonth(), now.getDate());

                    if (inputDate > now) {
                        errors.push('Birth date cannot be in the future');
                        input.classList.add('error');
                    } else if (inputDate < hundredYearsAgo) {
                        errors.push('Birth date cannot be more than 100 years ago');
                        input.classList.add('error');
                    } else {
                        input.classList.remove('error');
                    }
                }
            });

            return errors;
        }

        // Enhanced form submission with validation
        function enhancedFormSubmit(event, submitHandler) {
            event.preventDefault();

            const form = event.target;
            const formType = form.id.replace('-form', '');

            // Validate form
            const validationErrors = validateForm(formType);
            if (validationErrors.length > 0) {
                showError(validationErrors, formType);
                return;
            }

            // Auto-save before submission
            autoSaveForm(formType);

            // Call original submit handler
            return submitHandler(event);
        }

        // Override original form handlers with enhanced versions
        document.addEventListener('DOMContentLoaded', function () {
            // Replace form event listeners with enhanced versions
            const birthChartForm = document.getElementById('birth-chart-form');
            const compatibilityForm = document.getElementById('compatibility-form');
            const behaviorForm = document.getElementById('behavior-form');

            if (birthChartForm) {
                birthChartForm.removeEventListener('submit', handleBirthChartSubmit);
                birthChartForm.addEventListener('submit', (e) => enhancedFormSubmit(e, handleBirthChartSubmit));
            }

            if (compatibilityForm) {
                compatibilityForm.removeEventListener('submit', handleCompatibilitySubmit);
                compatibilityForm.addEventListener('submit', (e) => enhancedFormSubmit(e, handleCompatibilitySubmit));
            }

            if (behaviorForm) {
                behaviorForm.removeEventListener('submit', handleBehaviorSubmit);
                behaviorForm.addEventListener('submit', (e) => enhancedFormSubmit(e, handleBehaviorSubmit));
            }
        });

        // Additional CSS for enhanced form validation
        const validationStyle = document.createElement('style');
        validationStyle.textContent = `
        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(-10px); }
        }

        .form-group input.error,
        .form-group select.error {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 4px rgba(220, 53, 69, 0.1) !important;
            background-color: rgba(220, 53, 69, 0.05) !important;
        }

        .form-group input.error:focus,
        .form-group select.error:focus {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 4px rgba(220, 53, 69, 0.2) !important;
        }

        /* Enhanced clear button with hover effect */
        .btn-clear:active {
            transform: translateY(-1px) scale(0.98);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        /* Tooltip for double-click hint */
        .btn-clear::after {
            content: 'Single click: Clear | Double click: Clear with confirmation';
            position: absolute;
            bottom: -35px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.8rem;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
            z-index: 1000;
        }

        .btn-clear:hover::after {
            opacity: 1;
        }

        /* Loading state for clear button */
        .btn-clear.loading {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none !important;
        }

        .btn-clear.loading::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 16px;
            height: 16px;
            border: 2px solid rgba(0, 0, 0, 0.3);
            border-top: 2px solid #495057;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        /* Form section animations */
        .form-section.clearing {
            animation: formClear 0.5s ease-in-out;
        }

        @keyframes formClear {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(0.98); }
            100% { opacity: 1; transform: scale(1); }
        }

        /* Success animation for cleared forms */
        .form-cleared {
            animation: successPulse 0.6s ease-in-out;
        }

        @keyframes successPulse {
            0% { background-color: rgba(255, 255, 255, 0.95); }
            50% { background-color: rgba(212, 237, 218, 0.3); }
            100% { background-color: rgba(255, 255, 255, 0.95); }
        }
    `;
        document.head.appendChild(validationStyle);

        // Global error handler for uncaught errors
        window.addEventListener('error', function (event) {
            console.error('Global error:', event.error);
            showNotification('An unexpected error occurred. Please try again.', 'error');
        });

        // Global handler for unhandled promise rejections
        window.addEventListener('unhandledrejection', function (event) {
            console.error('Unhandled promise rejection:', event.reason);
            showNotification('A network or processing error occurred. Please check your connection and try again.', 'error');
        });

        // Clear all forms function (accessible globally)
        window.clearAllForms = function () {
            if (confirm('Are you sure you want to clear ALL forms? This will remove all entered data.')) {
                ['birth-chart', 'compatibility', 'behavior'].forEach(formType => {
                    clearForm(formType);
                    clearSavedFormData(formType);
                });
                showNotification('All forms cleared successfully!', 'success');
            }
        };

        // Export form data function
        window.exportFormData = function (formType) {
            const form = document.getElementById(`${formType}-form`);
            if (!form) return;

            const formData = new FormData(form);
            const data = {};

            for (let [key, value] of formData.entries()) {
                if (value.trim() !== '' && !key.includes('year') && !key.includes('month') && !key.includes('day') && !key.includes('hour') && !key.includes('minute') && !key.includes('timezone') && !key.includes('latitude') && !key.includes('longitude')) {
                    data[key] = value;
                }
            }

            if (Object.keys(data).length === 0) {
                showNotification('No data to export!', 'error');
                return;
            }

            const exportData = {
                formType: formType,
                data: data,
                exportedAt: new Date().toISOString(),
                exportedBy: 'vikramNplus'
            };

            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `astrology_${formType}_data_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            showNotification('Form data exported successfully!', 'success');
        };

        // Import form data function
        window.importFormData = function (formType) {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = function (event) {
                const file = event.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = function (e) {
                    try {
                        const importData = JSON.parse(e.target.result);

                        if (importData.formType !== formType) {
                            showNotification('Invalid file: Form type mismatch!', 'error');
                            return;
                        }

                        const form = document.getElementById(`${formType}-form`);
                        Object.entries(importData.data).forEach(([key, value]) => {
                            const input = form.querySelector(`[name="${key}"]`);
                            if (input && input.type !== 'hidden') {
                                input.value = value;
                            }
                        });

                        showNotification('Form data imported successfully!', 'success');
                    } catch (error) {
                        showNotification('Error importing file: Invalid JSON format!', 'error');
                    }
                };
                reader.readAsText(file);
            };
            input.click();
        };

        console.log('CKC Astrology Portal initialized successfully!');
        console.log('Available functions: clearAllForms(), exportFormData(formType), importFormData(formType)');
        console.log('Current user:', 'vikramNplus');
        console.log('Form clearing shortcuts: Ctrl+R (current form), clearAllForms() (all forms)');
    </script>
</body>

</html>